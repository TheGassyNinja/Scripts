#+Title: My Scripts
#+DESCRIPTION: Global README for Scripts
#+PROPERTY: header-args :tangle

*   TABLE OF CONTENTS :toc:
-   [[#startupsh][Startup.sh]]
-   [[#layout1sh][Layout1.sh]]
-   [[#pywal-switchersh][pywal-switcher.sh]]
- [[#adaptersh][adapter.sh]]
-   [[#myfish][Myfi.sh]]
- [[#chmod-all-scripts-after-tangle][chmod all scripts after tangle]]
-   [[#test-area][Test-area]]
  -  [[#my-scriptssh][My-Scripts.sh]]
-   [[#dwmblocks][DWMBLOCKS]]
  -  [[#timedate][time/date]]
  -  [[#mem][Mem]]
  -  [[#cpu][CPU]]
  -  [[#updates][Updates]]
  -  [[#volume][Volume]]
  -  [[#weather][Weather]]
  -  [[#network][Network]]
  -  [[#mpd][MPD]]
-  [[#new-test][NEW Test]]

*   Startup.sh
  Xset turn off screen blanking
  Start emacs daemon
  Run dispaly.sh (dmenu xrandr for monitor setup)
  Restart BSPWM
  Sleep 1 (wait for reload)
  Run layout1.sh (Setup my standard workspace)
  Sleep 3
  Run pywal-switcher.sh (Set wallpaper and colorscheme)
#+begin_src bash :tangle startup.sh
#!/usr/bin/env bash
xset s off -dpms
xrandr --output eDP-1 --off --output HDMI-1 --auto --primary
/usr/bin/emacs -daemon --with-x-toolkit=lucid &
sudo mount -t nfs -o vers=4 192.168.254.21:/srv/nfs/DataT ~/mnt/DataT
sudo mount -t nfs -o vers=4 192.168.254.21:/srv/nfs/Data3 ~/mnt/Data3
bspc wm -r
sleep 1
$HOME/Scripts/layout1.sh
sleep 3
$HOME/Scripts/pywal-switcher.sh
#+end_src

*   Layout1.sh
Setup my standard Workspace
3 cava (left-mono stereo right-mono) on bottom - 2 terminals

#+begin_src bash :tangle layout1.sh

#!/usr/bin/env sh

alacritty & 
sleep 1
bspc node -p south
bspc node -o 0.85 
alacritty -e cava -p ~/.config/cava/right-config & 
sleep 1.5 
bspc node -p west
bspc node -o 0.75
alacritty -e cava -p ~/.config/cava/left-config & 

sleep 1
bspc node -o 0.34
alacritty -e cava &
sleep 1
bspc node -f north
alacritty &

#+end_src

*   pywal-switcher.sh
dmenu script to set Wallpaper with matching colorscheme
Quietly kill nitrogen
Set $DIR with wallpapers
Make list of pics in $DIR | Make human readable
Use dmenu to make $choice
py-wal Quietly set $choice

#+begin_src bash :tangle pywal-switcher.sh

#!/usr/bin/env bash
killall -q nitrogen

if ! command -v rofi &> /dev/null
   then
       MENU="dmenu"
       else
           MENU="rofi -dmenu"
    fi

DIR="$HOME/py-walpapers"
options=$(cd ${DIR} && /bin/ls | cut -d "." -f 1)
choice=$(echo -e "${options[@]}" | $MENU -i -p 'Wallpapers: ')
wal -q -i  ${DIR}/${choice}.*

exit 1
#+end_src


* adapter.sh
Check if laptop is plugged in
acpi is a dependency
#+begin_src bash :tangle adapter.sh
 #!/usr/bin/env bash

# Declare Vars
ACSTATUS=` acpi -a | awk '{print $3}'`

echo $ACSTATUS

if [ "$ACSTATUS" == "on-line" ];
	then
		mpg123 -q ~/Scripts/Sounds/oh-hell-no.mp3  & notify-send -u critical -w "OFF-LINE!!!!"

fi

#+end_src


*   Myfi.sh

#+begin_src bash :tangle myfi.sh
#!/bin/bash
if ! command -v rofi &> /dev/null
   then
       MENU="dmenu"
       else
           MENU="rofi -dmenu"
    fi

bssid=$(nmcli device wifi list | sed -n '1!p' | cut -b 9- | $MENU -l 10 -p "Select Wifi  :" | cut -d' ' -f1)
   pass=$(echo "" | $MENU -p "Enter Password  :")

 [ -n "$pass" ] && nmcli device wifi connect "$bssid" password "$pass" || nmcli device wifi connect "$bssid"

 sleep 10

if ping -q -c 2 -W 2 google.com >/dev/null; then
       	notify-send "Your internet is working :)"
		 else
	 notify-send "Your internet is not working :)"
fi
#+end_src


* chmod all scripts after tangle

#+begin_src bash
 #!/usr/bin/env bash
chmod +x adapter.sh
chmod +x startup.sh
chmod +x layout1.sh
chmod +x pywal-switcher.sh
chmod +x myfi.sh


#+end_src


*   Test-area
**  My-Scripts.sh
#+begin_src bash

 #!/usr/bin/env sh

if ! command -v rofi &> /dev/null
   then
       MENU="dmenu"
       else
           MENU="rofi -dmenu"
    fi

DIR="$HOME/Scripts"
options=$(cd ${DIR} && /bin/ls | grep .sh | cut -d "." -f 1)
choice=$(echo -e "${options[@]}" | $MENU -i -p 'My-Scripts: ')

 ${DIR}/${choice}.*

#+end_src

*   DWMBLOCKS
**  time/date
**  Mem
**  CPU
**  Updates
**  Volume
**  Weather
**  Network
**  MPD





:wq


*  NEW Test
#+begin_src bash
#1/usr/bin/env sh

UPD=$(checkupdates | wc -l)
if $UPD > 10
   then
notify-send -u critical -w "Updates ${UPD}"


fi



#+end_src

#+RESULTS:

#+begin_src bash
#!/usr/bin/env sh

EDITOR="vim"
if ! command -v rofi &> /dev/null
   then
       MENU="dmenu"
       else
           MENU="rofi -dmenu"
    fi
declare -a CONFS=(
$HOME/Scripts/README.org

)

choice=$(printf "%s\n" "${CONFS[@]}" | $MENU -i -p 'CONFIGS: ')

   st -e $EDITOR $choice

#+end_src

#+RESULTS:
